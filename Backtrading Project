import backtrader as bt
import datetime
import yfinance as yf
import matplotlib.pyplot as plt

cerebro = bt.Cerebro()
df = yf.download('SPY', start='2000-01-02',end = '2024-01-20')

feed = bt.feeds.PandasData(dataname=df)

#Strategy

class TestStrategy(bt.Strategy):

    def log(self, txt, dt=None):
        ''' Logging function fot this strategy'''
        dt = dt or self.datas[0].datetime.date(0)
        print('%s, %s' % (dt.isoformat(), txt))

    def __init__(self):
        # Keep a reference to the "close" line in the data[0] dataseries
        self.dataclose = self.datas[0].close
        self.order = None
    def notify_order(self,order):
        if order.status in [order.Submitted, order.Accepted]:
            return

        if order.status in [order.Completed]:
            if order.isbuy():
                self.log('BUY EXECUTED {}'.format(order.executed.price))
            elif order.issell():
                self.log('SELL EXECUTED {}'.format(order.executed.price))

            self.bar_executed = len(self)

        self.order = None

    def next(self):
        # Simply log the closing pri ce of the series from the reference
        self.log('Close, %.2f' % self.dataclose[0])

        if self.order:
            return
        if not self.position:
            if self.dataclose[0] < self.dataclose[-1]:
                # current close less than previous close

                if self.dataclose[-1] < self.dataclose[-2]:
                    # previous close less than the previous close

                    # BUY, BUY, BUY!!! (with all possible default parameters)
                    self.log('BUY CREATE, %.2f' % self.dataclose[0])
                    self.order = self.buy()
        else:
            if len(self) >=  (self.bar_executed + 5):
                self.log('SELL CREATED {}'.format(self.dataclose[0]))
                self.order =  self.sell()


#End strategy

cerebro.broker.set_cash(1000000)
print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())

cerebro.addstrategy(TestStrategy)
cerebro.adddata(feed)
#Nombre de shares à acheter par ordre
cerebro.addsizer(bt.sizers.FixedSize, stake=10000)
# Exécutez le backtest
cerebro.run()
print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())
# Affichez le graphique
#fig = cerebro.plot(style='bar', returnfig=True)[0]
cerebro.plot()
plt.show()
