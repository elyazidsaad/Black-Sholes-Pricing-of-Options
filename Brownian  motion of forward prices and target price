import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import dates as mdates
import pandas as pd


# Fonction pour générer un scénario de mouvement brownien géométrique
def generate_geometric_brownian_motion(initial_price, drift, volatility, num_days):
    # Télécharge les données historiques depuis Yahoo Finance
    stock_data = yf.download('^FCHI', start='2010-01-01', end='2020-01-01')

    # Calcule le rendement logarithmique quotidien
    log_returns = np.log(1 + stock_data['Adj Close'].pct_change()).dropna()

    # Calcul des paramètres nécessaires pour le mouvement brownien géométrique
    daily_drift = log_returns.mean()  # Rendement logarithmique moyen journalier
    daily_volatility = log_returns.std()  # Volatilité du Rendement logarithmique journalier

    # Génère des scénarios de mouvement brownien géométrique
    scenarios = []
    for _ in range(num_days):
        daily_returns = np.random.normal((daily_drift - 0.5 * daily_volatility ** 2), daily_volatility, num_days)
        prices = [initial_price * np.exp(np.sum(daily_returns[:i])) for i in range(1, num_days + 1)]
        scenarios.append(prices)

    return scenarios


# Fonction pour générer la moyenne des prévisions
def generate_average_forecast(scenarios):
    return np.mean(scenarios, axis=0)


# Fonction pour évaluer la condition
def check_condition(scenario, threshold_index, threshold):
    return int(scenario[threshold_index] > threshold)


# Spécifiez les paramètres
initial_price = yf.download('^FCHI', start='2010-01-01', end='2020-01-01')['Adj Close'][-1]
drift = 3.958124145485831e-05  # ESTIMATEUR EMPIRIQUE DU RENDEMENT MOYEN ATTENDU ENTRE 2000 ET 2024
volatility = 0.01405809388346933  # ESTIMATEUR EMPIRIQUE DE LA VOLATILITE ENTRE 2000 ET 2024
num_models = 100  # Nombre de modèles à générer
num_days_forecast = 252 * 8  # Nombre de jours de prévision (en année de jours ouvrables)

# Génère n scénarios de mouvement brownien géométrique
all_scenarios = generate_geometric_brownian_motion(initial_price, drift, volatility, num_days_forecast)

# Obtient les prix réels pour la période historique
historical_prices = yf.download('^FCHI', start='2010-01-01', end='2024-01-10')['Adj Close']

# Modèles prévisionnels (rouge en ligne continue)
plt.figure(figsize=(10, 6))
for i in range(num_models):
    plt.plot(pd.date_range(start='2020-01-02', periods=num_days_forecast, freq='B'), all_scenarios[i], color='red',
             alpha=0.03)

# Moyenne des prévisions (vert en ligne continue)
average_forecast = generate_average_forecast(all_scenarios)
plt.plot(pd.date_range(start='2020-01-02', periods=num_days_forecast, freq='B'), average_forecast,
         label='Moyenne des prévisions', color='green')

# Période historique (bleu en ligne continue)
plt.plot(historical_prices.index, historical_prices, label='Historique', color='blue')

# Convertir les dates en numéros de série temporelle
start_date_limit = mdates.date2num(pd.to_datetime('2010-01-01'))
end_date_limit = mdates.date2num(pd.to_datetime('2028-10-01'))

# Limiter l'axe des abscisses et des ordonnées
plt.xlim(start_date_limit, end_date_limit)
plt.ylim(0, 20000)

# Identifier les scénarios au-dessus de X le 01.01.2028
X = 8000
threshold_date = pd.to_datetime('2028-01-01')
threshold_index = 7 * 252  # Indice de la valeur correspondant au 01.02.2028 dans chaque scénario
comparaison_avg = average_forecast[252 * 7]
# Appliquer la fonction à chaque scénario
scenarios_above_threshold = [check_condition(scenario, threshold_index, X) for scenario in all_scenarios]

# Calculer le pourcentage
percentage_above_threshold = (np.mean(scenarios_above_threshold) * 100)

# Afficher le pourcentage des scénarios au-dessus de X au 01.01.2028
print('Pourcentage de scénarios au-dessus de', X, f'au 01.01.2028: {percentage_above_threshold:.2f}%',
      'la moyenne est à', comparaison_avg)

# Calculer et afficher la moyenne des valeurs prises par tous les scénarios au-dessus de X
average_values_above_threshold = np.mean(
    [scenario[threshold_index] for scenario in all_scenarios if check_condition(scenario, threshold_index, X)])

print('Moyenne des valeurs prises par tous les scénarios au-dessus de', X,
      f'au 01.01.2028: {average_values_above_threshold:.2f}')

# Ajouter une ligne parallèle à l'axe des abscisses à l'ordonnée X
plt.axhline(y=X, color='black', linestyle='--', label=f'Ligne à l\'ordonnée {X}')

plt.title(f'{num_models} Scénarios de Prévision entre 2016 et 2028 et Moyenne')
plt.xlabel('Date')
plt.ylabel('Prix de l\'Action')
plt.legend()

# Spécifiez le chemin et le nom de fichier pour sauvegarder l'image
output_path = '/Users/elyazidsaad/Desktop/'
output_filename = 'graphique_prediction_memoire.png'

# Sauvegarder le graphique avec une résolution de 700 dpi
#plt.savefig(output_path + output_filename, dpi=700, bbox_inches='tight')

# Afficher le graphique
plt.show()
